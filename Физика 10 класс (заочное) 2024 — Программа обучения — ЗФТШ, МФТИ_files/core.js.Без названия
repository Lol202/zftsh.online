(function () { // START NAMESPACE
    var $ = 'id' in document ? document.id : window.$;
    en4 = {};

    en4.core = {
        baseUrl: false,
        basePath: false,
        loader: false,
        environment: 'production',
        setBaseUrl: function (url) {
            this.baseUrl = url;
            var m = this.baseUrl.match(/^(.+?)index[.]php/i);
            this.basePath = (m ? m[1] : this.baseUrl);
        },
        subject: {
            type: '',
            id: 0,
            guid: ''
        },
        showError: function (text) {
            Smoothbox.close();
            Smoothbox.instance = new Smoothbox.Modal.String({
                bodyText: text
            });
        }

    };

    en4.core.cometSpinnerTemplate = '<img src="https://'+(window.location.host ? window.location.host : 'abitu.net')+'/application/modules/Core/externals/images/comet-spinner.gif" style="width:128px;height128px;display:none;position: fixed;transform: translate(-50%, -50%);left: 50%;top: 50%;z-index: 10000;">';
    /**
     * Run Once scripts
     */
    en4.core.runonce = {
        executing: false,
        fns: [],
        add: function (fn) {
            this.fns.push(fn);
        },
        trigger: function () {
            if (this.executing)
                return;
            this.executing = true;
            var fn;
            while ((fn = this.fns.shift())) {
                $try(function () {
                    fn();
                });
            }
            this.fns = [];
            this.executing = false;
        }

    };

    en4.core.onSmoothboxPluginLoad = function(callback){
        en4.core.onSmoothboxPluginLoad.counter = en4.core.onSmoothboxPluginLoad.counter ? en4.core.onSmoothboxPluginLoad.counter + 1 : 1;
        if (window.Smoothbox && typeof window.Smoothbox.open == 'function'){
            callback();
        }else if (en4.core.onSmoothboxPluginLoad.counter < 100){
            setTimeout(function(){en4.core.onSmoothboxPluginLoad(callback);}, 50);
        }
    };

    /**
     * shutdown scripts
     */
    en4.core.shutdown = {
        executing: false,
        fns: [],
        add: function (fn) {
            this.fns.push(fn);
        },
        trigger: function () {
            if (this.executing)
                return;
            this.executing = true;
            var fn;
            while ((fn = this.fns.shift())) {
                $try(function () {
                    fn();
                });
            }
            this.fns = [];
            this.executing = false;
        }

    };

    window.addEventListener("load", function () {
        en4.core.runonce.trigger();
    }, false);

    window.addEventListener("unload", function () {
        en4.core.shutdown.trigger();
    }, false);



    /**
     * Request pipeline
     */
    en4.core.request = {
        activeRequests: [],
        isRequestActive: function () {
            return (this.activeRequests.length > 0);
        },
        send: function (req, options) {
            options = options || {};
            if (!$type(options.force))
                options.force = false;

            // If there are currently active requests, ignore
            if (this.activeRequests.length > 0 && !options.force) {
                return this;
            }
            this.activeRequests.push(req);

            // Process options
            if (!$type(options.htmlJsonKey))
                options.htmlJsonKey = 'body';
            if ($type(options.element)) {
                options.updateHtmlElement = options.element;
                options.evalsScriptsElement = options.element;
            }

            // OnComplete
            var bind = this;
            req.addEvent('success', function (response, response2, response3, response4) {
                bind.activeRequests.erase(req);
                var htmlBody;
                var jsBody;
                //alert($type(response) + $type(response2) + $type(response3) + $type(response4));

                // Get response
                if ($type(response) == 'object') { // JSON response
                    htmlBody = response[options.htmlJsonKey];
                } else if ($type(response3) == 'string') { // HTML response
                    htmlBody = response3;
                    jsBody = response4;
                }

                // An error probably occurred
                if (!response && !response3 && $type(options.updateHtmlElement)) {
                    en4.core.showError('An error has occurred processing the request. The target may no longer exist.');
                    return;
                }

                if ($type(response) == 'object' && $type(response.status) && response.status == false /* && $type(response.error) */) {
                    en4.core.showError('An error has occurred processing the request. The target may no longer exist.' + '<br /><br /><button onclick="Smoothbox.close()">Close</button>');
                    return;
                }

                // Get scripts
                if ($type(options.evalsScriptsElement) || $type(options.evalsScripts)) {
                    if (htmlBody)
                        htmlBody.stripScripts(true);
                    if (jsBody)
                        eval(jsBody);
                }

                if ($type(options.updateHtmlElement) && htmlBody) {
                    if ($type(options.updateHtmlMode) && options.updateHtmlMode == 'append') {
                        Elements.from(htmlBody).inject($(options.updateHtmlElement));
                    } else if ($type(options.updateHtmlMode) && options.updateHtmlMode == 'prepend') {
                        Elements.from(htmlBody).reverse().inject($(options.updateHtmlElement), 'top');
                    } else if ($type(options.updateHtmlMode) && options.updateHtmlMode == 'comments' && Elements.from(htmlBody) && Elements.from(htmlBody)[1] && Elements.from(htmlBody)[1].getElement('.comments')) {
                        $(options.updateHtmlElement).getElement('.comments').destroy();
                        $(options.updateHtmlElement).getElement('.feed_item_date').destroy();
                        if (Elements.from(htmlBody)[1].getElement('.feed_item_date'))
                            Elements.from(htmlBody)[1].getElement('.feed_item_date').inject($(options.updateHtmlElement.getElement('.feed_item_body')));
                        Elements.from(htmlBody)[1].getElement('.comments').inject($(options.updateHtmlElement.getElement('.feed_item_body')));
                    } else {
                        $(options.updateHtmlElement).empty();
                        Elements.from(htmlBody).inject($(options.updateHtmlElement));
                    }
                    Smoothbox.bind($(options.updateHtmlElement));
                }

                if (!$type(options.doRunOnce) || !options.doRunOnce) {
                    en4.core.runonce.trigger();
                }
            });

            req.send();

            return this;
        },
        evalScripts: function (element) {
            element = $(element);
            if (!element)
                return this;
            element.getElements('script').each(function (script) {
                if (script.type != 'text/javascript')
                    return;
                if (script.src) {
                    Asset.javascript(script.src);
                }
                else if (script.innerHTML.trim()) {
                    eval(script.innerHTML);
                }
            });

            return this;
        }

    };


    /**
     * Comments
     */
    en4.core.comments = {
        loadComments: function (type, id, page) {
            en4.core.request.send(new Request.HTML({
                url: en4.core.baseUrl + 'core/comment/list',
                data: {
                    format: 'html',
                    type: type,
                    id: id,
                    page: page
                }
            }), {
                'element': document.getElementById('comments')
            });
        },
        initForm: function(wrapper){
            var form = wrapper.find('.comment-form:first');
         	this.initReplys(wrapper);     	
          	form.submit(this.submitComment);
          	setTimeout(function() {
                autosize(form.find('[name=body]')[0]);
            }, 500);
            form.find('[name=body]').keypress(function(e){
                if (e.keyCode == 13 && e.shiftKey) {
                    form.submit();
                    e.preventDefault();
                }
            });
        },
        submitComment: function (e) {
        	e.preventDefault();
        	var form = jQuery(this);
            if (form.is('[data-prevent-submit]')){
                return;
            }
                var wrapper = jQuery(this).parents('.comments:first');
                var id = form.find('[name=identity]').val();
                var type = form.find('[name=type]').val();
                var body_id = 'body'+type+'_'+id;
                
                var editor = null;
                if (typeof tinymce == 'object' && (editor = tinymce.get(body_id))){
                    try {
                        jQuery('#'+body_id).val( editor.getContent() );
                    }catch(e){}
                }
        	var formValues = form.serialize();
        	formValues += '&format=json';
        	formValues += '&id=' + id;

        	let submitValue = null;
        	let submits = form.find('[name="submit"]');
            submits.each(function(){//note: multi-submit-buttons detect
                let clickTs = parseInt(jQuery(this).attr('data-click-ts'));
                if (clickTs && performance.now() - clickTs < 500){
                    formValues += '&'+jQuery(this).attr('name')+'='+(submitValue = jQuery(this).attr('value'));
                }
                jQuery(this).attr('data-orig-text', jQuery(this).html()).empty().append(getLoaderImg());
            });


        	jQuery.post('/core/comment/create', formValues, function(resp){
                submits.each(function(){
                    jQuery(this).html( jQuery(this).attr('data-orig-text') ) ;
                });
                let noticePlace;
                if (submits.length == 1) noticePlace = submits;
                else noticePlace = jQuery(submits[0]).parent();
                noticePlace.parent().find('.tip').remove();
        	    if (resp.error){
                    noticePlace.after('<div class="tip">'+(resp.errors ? resp.errors.join('<BR>') : resp.error)+'</div>');
                    return;
                }

                if (editor)
                {
                    editor.remove();
                }
        		wrapper.html(resp.body);
                jQuery('#'+body_id).focus();

                let uploadId = form.find('[data-upload-id]').attr('data-upload-id');
                if (uploadId) {
                    let form = jQuery('#' + body_id).closest('form');
                    jQuery('[data-upload-id=' + uploadId + '] #uploadfileids').val('');
                    form.find('.photo-uploader-frame').html('');
                }

        		if (typeof window.onCommentAddSuccess == 'function') window.onCommentAddSuccess(type+'_'+id, resp, submitValue);
        	});            
        	return;
        },
       /* Likes are deprecated for now.
        * 

        like: function (type, id, comment_id) {
            en4.core.request.send(new Request.JSON({
                url: en4.core.baseUrl + 'core/comment/like',
                data: {
                    format: 'json',
                    type: type,
                    id: id,
                    comment_id: comment_id
                }
            }), {
                'element': document.getElementById('comments')
            });
        },
        unlike: function (type, id, comment_id) {
            en4.core.request.send(new Request.JSON({
                url: en4.core.baseUrl + 'core/comment/unlike',
                data: {
                    format: 'json',
                    type: type,
                    id: id,
                    comment_id: comment_id
                }
            }), {
                'element': $('comments')
            });
        },
        showLikes: function (type, id) {
            en4.core.request.send(new Request.HTML({
                url: en4.core.baseUrl + 'core/comment/list',
                data: {
                    format: 'html',
                    type: type,
                    id: id,
                    viewAllLikes: true
                }
            }), {
                'element': document.getElementById('comments')
            });
        },*/
        deleteComment: function (type, id, comment_id) {
            var comment = document.getElementById('comment-' + comment_id);
            var wrapper = jQuery(comment).parents(".comments");
            
            if (!confirm(en4.core.language.translate('Are you sure you want to delete this?'))) {
                return;
            }
            (new Request.JSON({
                url: en4.core.baseUrl + 'core/comment/delete',
                data: {
                    format: 'json',
                    type: type,
                    id: id,
                    comment_id: comment_id
                },
                onComplete: function () {
                    if (comment) {
                        comment.destroy();
                    }

                    try {
                        var commentCount = document.querySelector(".comments_options span", wrapper[0]);
                        var m = commentCount.get('html').match(/\d+/);
                        var newCount = (parseInt(m[0]) != 'NaN' && parseInt(m[0]) > 1 ? parseInt(m[0]) - 1 : 0);
                        commentCount.set('html', commentCount.get('html').replace(m[0], newCount));
                    }
                    catch (e) {

                    }
                }
            })).send();
        },
		createCommentLabel: null,
		_removeMathjax: function(element){
			if (typeof window.MathJax != 'undefined'){
				var jaxes = MathJax.Hub.getAllJax( element[0] );
				for(var i =0;i<jaxes.length;i++){
					try{
						var src = jaxes[i].SourceElement();
						var latex;
						if (src.getAttribute("type").indexOf("math/tex")!=-1){
							latex = src.text;
						}else if (src.text.indexOf('"LaTeX">')!=-1){
							latex = src.text.split("</annotation>")[0].split('"LaTeX">')[1];
						}else{
							continue;
						}
						src.parentNode.removeChild(src);
						let mjxWrapper = jQuery('#' + jaxes[i].inputID + '-Frame');
						if (mjxWrapper.closest('.mjx-chtml').length) mjxWrapper = mjxWrapper.parents('.mjx-chtml:last');
                        mjxWrapper.replaceWith( '$$' + latex + '$$');
						jaxes[i].Remove();
					}catch(e){/*SILENCE*/}
				}
				element.find('.MathJax_Preview').remove();
			}
		},
		editComment: function (type, id, comment_id) {
            let $ = jQuery;
			var comment = $('#comment-' + comment_id);
            var commentText = $.trim( MathJaxRevertRendering( comment.find('.comments_body').html() ) );
            var textareaId = 'body'+type+'_'+id;
            var editorMCE = window.tinymce ? tinymce.get(textareaId) : null;

            let commentAttachments = comment.find('[data-attachment-id]');
            if (commentAttachments.length){
                let attachmentsBody = '';
                let attachmentIds = [];
                commentAttachments.each(function(){
                    let fileId = $(this).attr('data-attachment-id');
                    attachmentIds.push(fileId);
                    let fileUrl = $(this).attr('href');
                    let fileName = $(this).attr('title');
                    /* @see application/modules/Storage/views/scripts/upload/upload.tpl */
                    attachmentsBody += '<li>' +
                        '<input type="text" value="'+fileId+'" data-width="48" data-height="48" data-fgColor="#0788a5" data-readOnly="1" data-bgColor="#3e4043" />' +
                        '<p><A HREF="'+fileUrl+'" target="_blank">'+fileName+'</A></p>' +
                        '<span title="Удалить" onclick="removeUploadItem(jQuery(this).parent())"></span>' +
                        '</li>';
                    if ($(this).is('.comment_attachment_img')){
                        attachmentsBody += '<div class=\'uploading_img\'><img src="'+fileUrl+'"></div>';
                    }
                });

                let form = $('#' + textareaId).closest('form');
                let uploadId = form.find('[data-upload-id]').attr('data-upload-id');
                $('[data-upload-id='+uploadId+'] #uploadfileids').val(attachmentIds.join(' ')+' ');

                form.find('.photo-uploader-frame').html(attachmentsBody);
                form.find('[data-role="show-uploads"]').click();
            }
			
			var scrollTo;
			if (editorMCE){
				editorMCE.setContent(commentText);
				scrollTo = $(editorMCE.iframeElement);
			}else{
				scrollTo = $('#' + textareaId).val(commentText);
			}
			
			var form = scrollTo.parents('form:first');
			var formtitle = form.prevAll('span:first');
			form.find('input[name="edit_comment"]').remove();
			if (comment.hasClass('editing')){
				comment.removeClass('editing');
				formtitle.html(this.createCommentLabel);
                form.find('[type="submit"]').each(function() {
                    let title = $(this).html();
                    if (title.indexOf('Редактировать')!=-1) title = title.replace('Редактировать', 'Отправить')
                    else title = 'Добавить';
                    $(this).removeClass('save').html(title);
                });
			}else{
				if (!this.createCommentLabel){
					this.createCommentLabel = formtitle.html();
				}
				formtitle.html("Редактировать выбранный комментарий <i class='fa fa-pencil' style=\"color:darkgreen;\"></i>");
                form.find('[type="submit"]').each(function() {
                    let title = $(this).html();
                    if (title.indexOf('Отправить')!=-1) title = title.replace('Отправить', 'Редактировать')
                    else title = 'Редактировать';
                    $(this).addClass('save').html(title);
                });
				comment.addClass('editing');
				form.append('<input name="edit_comment" value="'+comment_id+'" type="hidden">');
			}
            $('html, body').animate({scrollTop: scrollTo.offset().top - 100}, 400);
		},
        initReplys: function(wrapper){ // Функция работает с jQuery
        	var replyToWrp = jQuery('.reply-to-wrp', wrapper);
        	var replyToInput = jQuery('#parent_comment_id', wrapper);
        	var formBody = jQuery('[name=body]:first', wrapper);
        	var currentPrefixText = null;
        	var value = formBody.val();
        	jQuery('.answerable .comments_body, .answerable a.link-foot-btn', wrapper).click(function(){
        		var li = jQuery(this).parents('li');
        		replyToWrp.text(li.data('replytotext1'));        		        		
        		value = formBody.val();
        		if(value.startsWith(currentPrefixText)){
        			value = value.substr(currentPrefixText.length);
        		}	
        		currentPrefixText = li.data('replytotext2');
        		value = currentPrefixText + value; 
        		formBody.val(value).focus();	
        		replyToInput.val(li.data('id'));
        	});
        	formBody.on('keyup blur', function(){
        		if(currentPrefixText !== null){
        			var cValue = formBody.val();
        			if(!cValue.startsWith(currentPrefixText)){
	            		value = value.substr(currentPrefixText.length);
	            		formBody.val(value);	
	            		currentPrefixText = null;
	            		replyToWrp.text("");
	            		replyToInput.val('');
	            		return;
        			}
        		}
        		value = formBody.val();
        	});
        }
        
    };


    en4.core.languageAbstract = new Class({
        Implements: [Options, Events],
        name: 'language',
        options: {
            locale: 'en',
            defaultLocale: 'en'
        },
        data: {},
        initialize: function (options, data) {
            // b/c
            if ($type(options) == 'object') {
                if ($type(options.lang)) {
                    this.addData(options.lang);
                    delete options.lang;
                }
                if ($type(options.data)) {
                    this.addData(options.data);
                    delete options.data;
                }
                this.setOptions(options);
            }
            if ($type(data) == 'object') {
                this.setData(data);
            }
        },
        getName: function () {
            return this.name;
        },
        setLocale: function (locale) {
            this.options.locale = locale;
            return this;
        },
        getLocale: function () {
            return this.options.locale;
        },
        translate: function () {
            try {
                if (arguments.length < 1) {
                    return '';
                }

                // Process arguments
                var locale = this.options.locale;
                var messageId = arguments[0];
                var options = new Array();
                if (arguments.length > 1) {
                    for (var i = 1, l = arguments.length; i < l; i++) {
                        options.push(arguments[i]);
                    }
                }

                // Check plural
                var plural = false;
                var number = 1;
                if ($type(messageId) == 'array') {
                    if (messageId.length > 2) {
                        number = messageId.pop();
                        plural = messageId;
                    }
                    messageId = messageId[0];
                }

                // Get message
                var message;
                if ($type(this.data[messageId])) {
                    message = this.data[messageId];
                } else if (plural) {
                    message = plural;
                    locale = this.options.defaultLocale;
                } else {
                    message = messageId;
                }

                // Get correct message from plural
                if ($type(message) == 'array') {
                    var rule = this.getPlural(locale, number);
                    if ($type(message[rule])) {
                        message = message[rule];
                    } else {
                        message = message[0];
                    }
                }

                if (options.length <= 0) {
                    return message;
                }

                return message.vsprintf(options);
            } catch (e) {
                alert(e);
            }
        },
        setData: function (data) {
            if ($type(data) != 'object' && $type(data) != 'hash') {
                return this;
            }
            this.data = data;
            return this;
        },
        addData: function (data) {
            if ($type(data) != 'object' && $type(data) != 'hash') {
                return this;
            }
            this.data = $merge(this.data, data);
            return this;
        },
        getData: function (data) {
            return this.data;
        },
        getPlural: function (locale, number) {

            if ($type(locale) != 'string') {
                return 0;
            }

            if (locale == "pt_BR") {
                locale = "xbr";
            }

            if (locale.length > 3) {
                locale = locale.substring(0, locale.indexOf('_'));
            }

            switch (locale) {
                case 'en':
                    return (number == 1) ? 0 : 1;
                    break;

                case 'ru':
                    return ((number % 10 == 1) && (number % 100 != 11)) ? 0 :
                        (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10)
                        || (number % 100 >= 20))) ? 1 : 2);

                default:
                    return 0;
            }
        }

    });


    en4.core.language = new en4.core.languageAbstract();

    en4.user = {
        viewer: {
            type: false,
            id: false
        },
        attachEmailTaken: function (element, callback) {
            var bind = this;
            element.addEvent('blur', function () {
                bind.checkEmailTaken(element.value, callback);
            });
        },
        attachUsernameTaken: function (element, callback) {
            var bind = this;
            element.addEvent('blur', function () {
                bind.checkUsernameTaken(element.value, callback);
            });
        },
        checkEmailTaken: function (email, callback) {
            en4.core.request.send(new Request.JSON({
                url: en4.core.baseUrl + 'user/signup/taken',
                data: {
                    format: 'json',
                    email: email
                },
                onSuccess: function (responseObject) {
                    if ($type(responseObject.taken)) {
                        callback(responseObject.taken);
                    }
                }
            }));

            return this;
        },
        checkUsernameTaken: function (username) {
            en4.core.request.send(new Request.JSON({
                url: en4.core.baseUrl + 'user/signup/taken',
                data: {
                    format: 'json',
                    username: username
                },
                onSuccess: function (responseObject) {
                    if ($type(responseObject.taken)) {
                        callback(responseObject.taken);
                    }
                }
            }));

            return this;
        },
        clearStatus: function () {
            var request = new Request.JSON({
                url: en4.core.baseUrl + 'user/edit/clear-status',
                method: 'post',
                data: {
                    format: 'json'
                }
            });
            request.send();
            if ($('user_profile_status_container')) {
                $('user_profile_status_container').empty();
            }
            return request;
        }

    };
    
    en4.user.friends = {
        refreshLists: function () {

        },
        addToList: function (list_id, user_id) {
            var request = new Request.JSON({
                url: en4.core.baseUrl + 'user/friends/list-add',
                data: {
                    format: 'json',
                    friend_id: user_id,
                    list_id: list_id
                }
            });
            request.send();
            return request;
        },
        removeFromList: function (list_id, user_id) {
            var request = new Request.JSON({
                url: en4.core.baseUrl + 'user/friends/list-remove',
                data: {
                    format: 'json',
                    friend_id: user_id,
                    list_id: list_id
                }
            });
            request.send();
            return request;
        },
        createList: function (title, user_id) {
            var request = new Request.JSON({
                url: en4.core.baseUrl + 'user/friends/list-create',
                data: {
                    format: 'json',
                    friend_id: user_id,
                    title: title
                }
            });
            request.send();
            return request;
        },
        deleteList: function (list_id) {

            var bind = this;
            en4.core.request.send(new Request.JSON({
                url: en4.core.baseUrl + 'user/friends/list-delete',
                data: {
                    format: 'json',
                    user_id: en4.user.viewer.id,
                    list_id: list_id
                }
            }));

            return this;
        },
        showMenu: function (user_id) {
            document.getElementById('profile_friends_lists_menu_' + user_id).style.visibility = 'visible';
            document.getElementById('friends_lists_menu_input_' + user_id).focus();
            document.getElementById('friends_lists_menu_input_' + user_id).select();
        },
        hideMenu: function (user_id) {
            document.getElementById('profile_friends_lists_menu_' + user_id).style.visibility = 'hidden';
        },
        clearAddList: function (user_id) {
            document.getElementById('friends_lists_menu_input_' + user_id).value = "";
        }

    };

    /*
        examples
        en4.core.popup(jQuery('a.popup_open_link'), 'user_123', "Hello world!");
        en4.core.popup(jQuery('a.popup_open_link'), 'user_123', {"url" : '/widget/render/name/core.item-members/layout/nolayout/subject/user_123'});
    * */
    en4.core.popup = function(link, identity, htmlOrAjaxData, options){
        if (options==undefined) options = [];
        var isHtml = typeof htmlOrAjaxData == "string";
        var popupDiv = jQuery('#members_popup_'+identity);
        var popupDivPointer = jQuery('#members_popup_pointer_'+identity+',#members_popup_pointer_over_'+identity);
        var popupWithLabel = popupDiv.add(link.parent()).add(popupDivPointer);
        var reposition = function(){
            var p = link.offset();
            p.top += (options.dy ? options.dy : 0);
            p.left += (options.dx ? options.dx : 0);
            var globalWidth = jQuery('#global_content').length ? jQuery('#global_content').width() : jQuery('body').width();
            //позицию попапа - ставим в позицию ссылки. Регилируем маргинами.
            popupDivPointer.css('left', p.left);
            popupDiv.css('top', p.top);popupDivPointer.css('top', p.top);
            var width;
            if (typeof options.autoWidth != 'undefined'){
                //ширина попапа - не более чем 0.7 экрана и не более чем 680px
                popupDiv.css('width', Math.min(options.autoWidth, globalWidth*0.7) + "px" );
            }

            width = popupDiv.width();
            //справа и слева желаемы одинаковые отступы, однако блок необходимо прижать к треугольнику-указателю
            var wantedLeft = (globalWidth - width)/2;
            popupDiv.css('left', Math.max( Math.min(wantedLeft, p.left), p.left - width) + "px" );
            if (options.marginLeft){
                popupDiv.css('margin-left', options.marginLeft);
                popupDivPointer.css('margin-left', options.marginLeft);
            }
        };
        var hidePoupupChecker = null;

        var popupSemaphore = 1;
        var timeOfMembersLastActive = (new Date()).valueOf();
        var outClbc = function(event){var e = event.toElement || event.relatedTarget; if (!jQuery(e).parents('#members_popup_'+identity).length) popupSemaphore = 0;};
        var moveClbc = function(){popupSemaphore = 1; timeOfMembersLastActive = (new Date()).valueOf();};
        var isDestructed = false;

        var hideMembers = function(event){
            if (isDestructed) return;
            if (event.target !== true){
                var target = jQuery(event.target);
                if (target.parents('#members_popup_'+identity).length){
                    if (typeof options.closeSelector != 'undefined' && (target.is(options.closeSelector) || target.parents(options.closeSelector).length) ) {
                        jQuery(options.closeSelector).unbind('click', hideMembers);
                    }else{
                        return;
                    }
                }
            }
            if (typeof options.hideCallback != 'undefined' ) {
                if (options.hideCallback(popupWithLabel)){
                    return;
                }
            }
            jQuery(window).off('resize', reposition);
            popupDiv.fadeOut();
            popupDivPointer.fadeOut();
            clearInterval(hidePoupupChecker);
            popupWithLabel.off('mouseout', outClbc).off('mousemove', moveClbc);
            if (isHtml) {
                jQuery(document.documentElement).unbind('click', hideMembers);
                popupDiv.add(popupDivPointer).remove();
            }
            isDestructed = true;
        };
        var autoPopupHiding = function(){
            if (typeof options.closeSelector != 'undefined' ) {
                popupDiv.find(options.closeSelector).click(hideMembers);
            }

            if (typeof options.manualHide == 'undefined' || !options.manualHide) {
                clearInterval(hidePoupupChecker);


                popupWithLabel.mouseout(outClbc)
                    .mousemove(moveClbc);

                hidePoupupChecker = setInterval(function () {
                    if (!popupSemaphore && (new Date()).valueOf() - timeOfMembersLastActive > (options.hideTimeout ? options.hideTimeout : 1000) ) {
                        hideMembers({target: true});
                    }
                }, 100);
            }
        };
        if (popupDiv.length ){
            popupDiv.fadeIn();
            popupDivPointer.fadeIn();
            reposition();
            jQuery(window).resize(reposition);
            autoPopupHiding();
            return;
        }

        popupDiv = jQuery('<div class="members_popup" id="members_popup_'+identity+'" style="display:block;"><div style="text-align:center"></div>').appendTo(jQuery('body'));
        popupDiv.append('<div style="text-align:center;opacity:0.5;"><img src="/externals/smoothbox/loading.gif"></div>');

        popupDivPointer = jQuery('<div class="members_popup_pointer" id="members_popup_pointer_'+identity+'"></div><div class="members_popup_pointer_over"  id="members_popup_pointer_over_'+identity+'"></div>').insertBefore(popupDiv);
        popupWithLabel = popupDiv.add(link.parent()).add(popupDivPointer);

        jQuery(window).resize(reposition);


        if (isHtml){
            popupDiv.html(htmlOrAjaxData);
            reposition();
            autoPopupHiding();
            jQuery(document.documentElement).click(hideMembers);
        }else{
            reposition();
            jQuery.ajax(htmlOrAjaxData).done(function(html) {
                popupDiv.html(html);
                reposition();
                //init methods - possible need to advanced widgets with mootools scripts/smoothboxes
                en4.core.runonce.trigger();
                Smoothbox.bind();
                autoPopupHiding();
                jQuery(document.documentElement).click(hideMembers);
                if (typeof options.ajaxAfterCallback != 'undefined' ) {
                    options.ajaxAfterCallback(popupDiv);
                }
            }).fail(function() {
                /*SILENCE - at now*/
            });
        }
    };

    en4.core.members = {
        widgetURL: '/widget/render/name/core.item-members/layout/nolayout/subject/',
        
        /*params from request*/
        searchQuery:'',
        page:1,
        perPage:8,
        /*END: params from request*/
        
        popup: function(link, guid, options = {})
        {
            en4.core.popup(link, guid,{
                "url" : this.widgetURL+guid,
                "method": "POST",
                "dataType": "html",
                "data" :
                {
                    "page" : 1,
                    "itemCountPerPage":self.perPage
                },
            },
            {...{
                autoWidth: 680
            }, ...options});
        },
        paginate : function (link, item_guid,  page, is_waiting) {
            var url = this.widgetURL + item_guid;
            jQuery(link).addClass('ajaxProcessing');
            en4.core.request.send(new Request.HTML({
                'url': url,
                'data': {
                    'format': 'html',
                    'search': this.searchQuery,
                    'page': page,
                    'waiting': is_waiting,
                    'isPaginateAjax': true,
                    'itemCountPerPage' : this.perPage
                }
            }), {
                'element': link.getParents('.generic_layout_container')[0]
            });
        },
        showWaiting : function (link, item_guid) {
            var url = this.widgetURL + item_guid;
            jQuery(link).addClass('ajaxProcessing');
            en4.core.request.send(new Request.HTML({
                'url': url,
                'data': {
                    'format': 'html',
                    'waiting': true,
                    'itemCountPerPage' : this.perPage
                }
            }), {
                'element': link.getParents('.generic_layout_container')[0].getElements('#profile_members_div')[0]
            });
        },
        search : function(link, item_guid, search){
            var url = this.widgetURL + item_guid;
            en4.core.request.send(new Request.HTML({
                'url': url,
                'data': {
                    'format': 'html',
                    'search': search,
                    'isPaginateAjax': true,
                    'itemCountPerPage' : this.perPage
                }
            }), {
                'element': link.getParents('.generic_layout_container')[0]
            });
        }
    };
})(); // END NAMESPACE

/*adaptive*/
var viewportOriginalContent = null;
window.viewportMinWidth = 490;
window.adaptiveSetMin = function()
{
    if (jQuery('meta[name=viewport]').attr('content') && jQuery('meta[name=viewport]').attr('content').indexOf('user-scalable=0')!=-1){
        return;
    }
    if (!viewportOriginalContent) viewportOriginalContent = jQuery('meta[name=viewport]').attr('content');

    if(window.innerWidth <= window.viewportMinWidth) {
        jQuery('meta[name=viewport]').attr('content', 'width='+window.viewportMinWidth);
    }else{
        jQuery('meta[name=viewport]').attr('content', viewportOriginalContent);
    }
};
jQuery(document).ready(window.adaptiveSetMin);
jQuery(window).resize(window.adaptiveSetMin);

/*vertival paging*/
var abituVerticalPager = function(params){
    var isLoading = false;
    var win = jQuery(window);
    
    var list = params.list;
    if (!list.length){
        list = jQuery('[data-end-of-list]:first');
    }
    var filterForm = params.filterForm ? params.filterForm : null;
    var loadingIndicator = params.loadingIndicator;
    var injectResponseCallback = params.injectResponseCallback ? params.injectResponseCallback : null;
    var pageUrlParam = params.pageUrlParam ? params.pageUrlParam : 'page';
    
    var pageDownCheck = function(justLoaded){
            if (!list.length || !document.contains(list[0])){
                list = jQuery('[data-end-of-list]:first');
            }
            if (!list.data('page')){
                list.data('page', '1');
            }
            if(isLoading) return true;		
            var bottomEdge = list.offset().top + list.height() - 400;		
            if(win.scrollTop() + win.height() > bottomEdge){
                    if (justLoaded===true) win.scrollTop(bottomEdge - win.height()/2);
                    if(list.data('end-of-list') == 'yes') return true;
                    var currentPage = list.data('page') + 1;
                    list.data('page', currentPage);
                    loadingIndicator.show();
                    
                    var filterData = [];
                    if (filterForm){
                        var filterDataDirt = filterForm.serializeArray();

                        for(var i=0;i<filterDataDirt.length;i++){
                            if (filterDataDirt[i].value!=''&&filterDataDirt[i].value!='0')
                            {
                                filterData.push(filterDataDirt[i]);
                            }
                        }
                    }
                    
                    isLoading = true;
                    jQuery.get(document.location.pathname+'?'+pageUrlParam+'=' + currentPage, 
                            filterData,
                            function(response){
                                loadingIndicator.hide();
                                if (injectResponseCallback){
                                   injectResponseCallback(response, list);
                                }else{
                                    if(response == 'stop') {
                                            list.data('end-of-list', 'yes');
                                    } else {
                                            list.append(response);	
                                    }
                                }
                                if(response != 'stop') {
                                    if (typeof window.history.replaceState == 'function' )
                                        window.history.replaceState({}, null, this.url);
                                }
                                isLoading = false;
                    });
            }
    };
    win.scroll(pageDownCheck);
    pageDownCheck(true);
};

/*tinymce short initiators*/
var tinymceSelector = "textarea:not(.mceNoEditor)";
var headStyles = [];
(function(){
	var links = document.getElementsByTagName('link');
	for(var i = 0; i< links.length;i++){
		if (links[i].hasAttribute('href') && links[i].getAttribute('href').indexOf('.css')!=-1){
			headStyles.push(links[i].getAttribute('href'));
		}
	}
})();


var tinymceCustomTemplates = {
	'Пример' : '<div class="info_element"><div class="info_header">Пример</div><div class="info_content"><p> Содержание примера </p></div></div>',
	'Пример с решением' : '<div class="info_element"><div class="info_header">Пример</div><div class="info_content"><p> Пример задания </p><br></div><div class="info_header">Решение</div><div class="info_content"><p> Пример решения </p></div></div>',
};

var tinymceGetTemplateMenu = function(){
	var menu = {
		title: 'Шаблоны',
		items: []
	};
	var i=0;
	for(var key in tinymceCustomTemplates){if (tinymceCustomTemplates.hasOwnProperty(key)){
		menu.items.push({title:key, cmd: 'abituTpl' + i});
		i++;
	}}
	return [menu];
};

var tinymceOnSetup = function(ed) {
    ed.on('change', function(e) {
        jQuery(e.target.targetElm).trigger("change");
    });

    ed.on('init', function(e) {
        var container = ed.editorContainer ? ed.editorContainer : ed.bodyElement;
        var putAfter = jQuery(container);
        var previewBtn = "<A class='button_link' data-role='tinymce-preview-open' onclick='tinymcePreviewOpen(\""+ed.id+"\")'><i class='fa fa-eye'></i> &nbsp;"+(en4.core.language.options.locale.indexOf('ru')==0 ? 'Предпросмотр' : 'Preview')+"</A>";
        var containerOpen = "<div class='tinymce_preview' data-editor='"+ed.id+"'>";
        var containerClose = "<div class='preview_content' style='display:none'></div></div>";
        if (putAfter.parents("[data-tinymce-preview-oneline]").length){
            var save = putAfter.parent().children('[data-role="cancel"]:first');
            if (save.length) putAfter = save;
            putAfter.after(previewBtn + containerOpen + containerClose);
        }else{
            putAfter.after(containerOpen + previewBtn + containerClose);
        }

        ed.on('GetContent', function(event){
            /* TODO - maybe replace $$0<a<1$$ to $$0&lt;a&lt;1$$ event.content = replace ... */
        });
		jQuery(e.target.targetElm).trigger("tinymce-inited", ed);
    });
	
	//add custom templates
	var i=0;
	for(var key in tinymceCustomTemplates){if (tinymceCustomTemplates.hasOwnProperty(key)){
		(function(command, template){
			ed.addCommand(command, function() {
				ed.insertContent(template);
			});
		})( 'abituTpl' + i, tinymceCustomTemplates[key]);
		i++;
	}}
};

var tinymcePastePreprocess = function(editor, args){
    var $ = jQuery;
    args.content = MathJaxRevertRendering(args.content);
};

var tinymcePreviewOpen = function(id){
    var content = tinymce.get(id).getContent();
    content = content.replace(/<\/mn><mo>,<\/mo><mn>/g, ',');
    var preview = jQuery('.tinymce_preview[data-editor="'+id+'"]').show();
    let container = preview.find('.preview_content');
    container.css('max-width', container.parent().width()).html(content);
    MathJax.Hub.Queue(["Typeset",MathJax.Hub, preview[0]]);
    setTimeout(function(){
        preview.find('.preview_content').slideDown();
    },200);
    setTimeout(function() {
        preview.children('.button_link').html('<i class="fa fa-refresh"></i>').addClass('activated');
    }, 600);
};

function initTinymce(selector){
    var counter = en4.counter;
    if (!selector){
        resetAllTinymce();
    }
    let lang = en4.core.language.options.locale.substr(0,2);
    tinymce.init({
        mode: "exact",
        cache_suffix: '?c=' + counter,
        selector: selector?selector:tinymceSelector,
        extended_valid_elements : "svg[*]",
        object_resizing : "img,svg,table",
		content_css: headStyles,
		paste_data_images: true,
        element_format: "html",
        menubar: false,
        statusbar: false,
        verify_html: false,
        skin: "lightgray",
		style_formats_merge: true,
		style_formats: tinymceGetTemplateMenu(),
        theme:"modern",
        language: lang == 'zh' ? 'zh_CN' : lang,
        directionality: "ltr",
        height: "225",
		width: '100%',
		autoresize_max_height: '225',
        images_dataimg_filter : function(img) {
            return img.hasAttribute('internal-blob');
        },
        plugins: "anchor table colorpicker fullscreen layer link contextmenu paste tiny_mce_wiris jbimages codemirror lists advlist svgedit autoresize",
        relative_urls: false,
        toolbar: ",undo,redo,fullscreen,|,bold,italic,underline,removeformat,|,bullist, numlist,|,table,tiny_mce_wiris_formulaEditor,tiny_mce_wiris_formulaEditorChemistry,svgedit,|,alignleft",
        codemirror: {
            indentOnInit: true, // Whether or not to indent code on init.
            fullscreen: false,   // Default setting is false
            //path: 'CodeMirror', // Path to CodeMirror distribution
            config: {           // CodeMirror config object
                mode: 'htmlmixed',
                lineNumbers: true
            },
            width: 800,         // Default value is 800
            height: 600,        // Default value is 550
            saveCursorPosition: true    // Insert caret marker
        },
        valid_children : "+body[style]",
        setup : tinymceOnSetup,
        paste_preprocess: tinymcePastePreprocess,

    });
    addTinyMceSaveOnSubmitClick();
}

function initTinymce_small(selector){
    var counter = en4.counter;
    if (!selector){
        resetAllTinymce();
    }
    let lang = en4.core.language.options.locale.substr(0,2);
    tinymce.init({
        mode: "exact",
        cache_suffix: '?c=' + counter,
        selector: selector?selector:tinymceSelector,
        extended_valid_elements : "svg[*]",
        object_resizing : "img,svg,table",
		content_css: headStyles,
		paste_data_images: true,
        element_format: "html",
        menubar: false,
        statusbar: false,
        verify_html: false,
        skin: "lightgray",
		style_formats_merge: true,
		style_formats: tinymceGetTemplateMenu(),
        theme:"modern",
        language: lang == 'zh' ? 'zh_CN' : lang,
        directionality: "ltr",
        height: "200",
		width: '100%',
		autoresize_max_height: '200',
        images_dataimg_filter : function(img) {
            return img.hasAttribute('internal-blob');
        },
        plugins: "anchor table colorpicker fullscreen layer link image contextmenu media paste tiny_mce_wiris jbimages codemirror lists advlist svgedit autoresize",
        relative_urls: false,
        toolbar: "bold,italic,underline,|,undo,redo,cleanup ,|, styleselect ,removeformat,|, bullist, numlist,|,alignleft,| ,code,media,image,fullscreen,tiny_mce_wiris_formulaEditor,tiny_mce_wiris_formulaEditorChemistry,jbimages,svgedit",
        codemirror: {
            indentOnInit: true, // Whether or not to indent code on init.
            fullscreen: false,   // Default setting is false
            //path: 'CodeMirror', // Path to CodeMirror distribution
            config: {           // CodeMirror config object
                mode: 'htmlmixed',
                lineNumbers: true
            },
            width: 800,         // Default value is 800
            height: 600,        // Default value is 550
            saveCursorPosition: true    // Insert caret marker
        },
        valid_children : "+body[style]",
        setup : tinymceOnSetup,
        paste_preprocess: tinymcePastePreprocess,
    });
    addTinyMceSaveOnSubmitClick();
}

function initTinymce_full(selector){
    var counter = en4.counter;
    if (!selector){
        resetAllTinymce();
    }
    let lang = en4.core.language.options.locale.substr(0,2);
    tinymce.init({
        mode: "exact",
        cache_suffix: '?c=' + counter,
        selector: selector?selector:tinymceSelector,
        extended_valid_elements : "svg[*]",
        object_resizing : "img,svg,table",
		content_css: headStyles,
		paste_data_images: true,
        element_format: "html",
        menubar: false,
        statusbar: false,
        verify_html: false,
        skin: "lightgray",
		style_formats_merge: true,
		style_formats: tinymceGetTemplateMenu(),
        theme:"modern",
        language: lang == 'zh' ? 'zh_CN' : lang,
        directionality: "ltr",
        height: "300",
		width: '100%',
		autoresize_max_height: '300',
        images_dataimg_filter : function(img) {
            return img.hasAttribute('internal-blob');
        },
        plugins: "anchor table colorpicker fullscreen layer link image contextmenu media paste tiny_mce_wiris jbimages codemirror textcolor lists advlist svgedit autoresize",
        relative_urls: false,
        toolbar1: "fontselect,fontsizeselect,|,undo,redo,cleanup ,|, styleselect,removeformat,|,bullist, numlist,|,code,table,media,image,fullscreen,tiny_mce_wiris_formulaEditor,tiny_mce_wiris_formulaEditorChemistry,jbimages,svgedit,|,justifyleft",
        toolbar2: "bold,italic,underline,strikethrough,forecolor,backcolor,|,alignleft,aligncenter,alignright,alignjustify,|,outdent,indent,blockquote",
        codemirror: {
            indentOnInit: true, // Whether or not to indent code on init.
            fullscreen: false,   // Default setting is false
            //path: 'CodeMirror', // Path to CodeMirror distribution
            config: {           // CodeMirror config object
                mode: 'htmlmixed',
                lineNumbers: true
            },
            width: 800,         // Default value is 800
            height: 600,        // Default value is 550
            saveCursorPosition: true    // Insert caret marker
        },
        valid_children : "+body[style]",
        setup : tinymceOnSetup,
        paste_preprocess: tinymcePastePreprocess,
	});
    addTinyMceSaveOnSubmitClick();
}

function initTinymce_full_abs_url(selector){
    var counter = en4.counter;
    if (!selector){
        resetAllTinymce();
    }
    let lang = en4.core.language.options.locale.substr(0,2);
    tinymce.init({
        mode: "exact",
        cache_suffix: '?c=' + counter,
        selector: selector?selector:tinymceSelector,
        extended_valid_elements : "svg[*]",
        object_resizing : "img,svg,table",
        content_css: headStyles,
        paste_data_images: true,
        element_format: "html",
        menubar: false,
        statusbar: false,
        verify_html: false,
        skin: "lightgray",
        style_formats_merge: true,
        style_formats: tinymceGetTemplateMenu(),
        theme:"modern",
        language: lang == 'zh' ? 'zh_CN' : lang,
        directionality: "ltr",
        height: "300",
        width: '100%',
        autoresize_max_height: '300',
        images_dataimg_filter : function(img) {
            return img.hasAttribute('internal-blob');
        },
        plugins: "anchor table colorpicker fullscreen layer link image contextmenu media paste tiny_mce_wiris jbimages codemirror textcolor lists advlist svgedit autoresize",
        relative_urls : false,
        remove_script_host : false,
        convert_urls : true,
        toolbar1: "fontselect,fontsizeselect,|,undo,redo,cleanup ,|, styleselect,removeformat,|,bullist, numlist,|,code,table,media,image,fullscreen,tiny_mce_wiris_formulaEditor,tiny_mce_wiris_formulaEditorChemistry,jbimages,svgedit,|,justifyleft",
        toolbar2: "bold,italic,underline,strikethrough,forecolor,backcolor,|,alignleft,aligncenter,alignright,alignjustify,|,outdent,indent,blockquote",
        codemirror: {
            indentOnInit: true, // Whether or not to indent code on init.
            fullscreen: false,   // Default setting is false
            //path: 'CodeMirror', // Path to CodeMirror distribution
            config: {           // CodeMirror config object
                mode: 'htmlmixed',
                lineNumbers: true
            },
            width: 800,         // Default value is 800
            height: 600,        // Default value is 550
            saveCursorPosition: true    // Insert caret marker
        },
        valid_children : "+body[style]",
        setup : tinymceOnSetup,
        paste_preprocess: tinymcePastePreprocess,
    });
    addTinyMceSaveOnSubmitClick();
}

function initTinymce_onlyPreview(selector){
	if (!selector){
		return;
	}
	jQuery(document).ready(function(){
		let $elem = jQuery(selector);
		$elem.after('<div class="preview_content preview_content--disabled">' + $elem.val() + '</div>');
		$elem.hide();
	});

}

function addTinyMceSaveOnSubmitClick(){
    jQuery(document).ready(function(){
        jQuery(tinymce.settings.selector).parents('form').find('#submit,button[type=submit],input[type=submit]').mouseup(function(){
            tinyMCE.triggerSave();
        });
    });
}

function initTinymce_inline(selector, optionsExt){
    var counter = en4.counter;
    if (!selector){
        resetAllTinymce();
    }
    let lang = en4.core.language.options.locale.substr(0,2);
    var options = {
        mode: "exact",
        cache_suffix: '?c=' + counter,
        inline: true,
        selector: selector?selector:tinymceSelector,
        extended_valid_elements : "svg[*]",
        object_resizing : "img,svg,table",
        content_css: headStyles,
        paste_data_images: true,
        element_format: "html",
        menubar: true,
        statusbar: false,
        verify_html: false,
        skin: "lightgray",
		style_formats_merge: true,
		style_formats: tinymceGetTemplateMenu(),
        theme:"modern",
        language: lang == 'zh' ? 'zh_CN' : lang,
        directionality: "ltr",
        height: "300",
        images_dataimg_filter : function(img) {
            return img.hasAttribute('internal-blob');
        },
        plugins: "anchor table colorpicker fullscreen layer link image contextmenu media paste tiny_mce_wiris jbimages codemirror lists advlist",
        relative_urls: false,
        toolbar: "bold,italic,underline,|,undo,redo,cleanup, |, styleselect,removeformat,|,bullist, numlist,|,code,table,media,image,fullscreen,tiny_mce_wiris_formulaEditor,tiny_mce_wiris_formulaEditorChemistry,jbimages,|,alignleft",
        codemirror: {
            indentOnInit: true, // Whether or not to indent code on init.
            fullscreen: false,   // Default setting is false
            //path: 'CodeMirror', // Path to CodeMirror distribution
            config: {           // CodeMirror config object
                mode: 'htmlmixed',
                lineNumbers: true
            },
            width: 800,         // Default value is 800
            height: 600,        // Default value is 550
            saveCursorPosition: true    // Insert caret marker
        },
        valid_children : "+body[style]",
        setup : tinymceOnSetup,
        paste_preprocess: tinymcePastePreprocess,
    };
    if (optionsExt) for(var key in optionsExt){
        if (optionsExt.hasOwnProperty(key)){
            options[key] = optionsExt[key];
        }
    }
    tinymce.init(options);
}

function removeAllTinymce(elementIn)
{
    if (!elementIn) elementIn = document;
    var elements = elementIn.querySelectorAll(tinymceSelector);
    for(var i=0;i<elements.length;i++){
        if (!elements[i].hasAttribute('id')) continue;
        var editor = tinymce.get(elements[i].getAttribute('id'));
        if (editor){
            try {
                editor.remove();
            }catch(e){}
        }
    }
}

function resetAllTinymce()
{
    try{
        tinyMCE.triggerSave();
    }catch(e){/*silence*/}
    removeAllTinymce();
}

/*MathJax trigger on ajax complete*/
setTimeout(function hookMathJax() {
    if (typeof window.MathJax == 'undefined'){
        setTimeout(hookMathJax, 20);
        return;
    }
    MathJax.Hub.Register.StartupHook("TeX Jax Ready",function () {
        MathJax.Hub.Insert(MathJax.InputJax.TeX.Definitions.macros,{
            cancel: ["Extension","cancel"],
            bcancel: ["Extension","cancel"],
            xcancel: ["Extension","cancel"],
            cancelto: ["Extension","cancel"]
        });
    });

    var $ = jQuery;

    en4.core.mathLoading = function(wrapper, beginned)
    {
        wrapper = $(wrapper);
        if (beginned){
            if (!wrapper.length || $('.math_loading_spinner').length) return;
            wrapper.addClass('blurred');
            $(en4.core.cometSpinnerTemplate)
                .addClass('math_loading_spinner')
                .fadeIn(150)
                .appendTo('body');
        }else{
            wrapper.removeClass('blurred');
            $('.math_loading_spinner').fadeOut(400, function(){$(this).remove();});
        }
    };

    $( document ).bind("ajaxComplete", function(){
        setTimeout(function () {
            MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
        }, 50);
    });
    var mjProcessingBeginned = false;
    MathJax.Hub.Register.MessageHook("New Math",function (e) {
        if (mjProcessingBeginned) return;
        mjProcessingBeginned = true;
        $(window).trigger('mathjax.begin',[e]);
    });
    MathJax.Hub.Register.MessageHook("End Process",function (e) {
        $(window).trigger('mathjax.end', [e]);
        mjProcessingBeginned = false;
    });

    jQuery(window).on('mathjax.begin', function(){
		var focused = jQuery(document.activeElement);
        if (focused.parents('.mce-tinymce:first').length || focused.is('textarea')){
			return;
		}
        en4.core.mathLoading('.layout_article_profile_body,.olympic_column_2,[data-role="listed-solve"]', true);
    });
    jQuery(window).on('mathjax.end', function(){
        en4.core.mathLoading('.layout_article_profile_body,.olympic_column_2,[data-role="listed-solve"]', false);
    });
}, 20);


var MathJaxRevertRendering = function(html){
    var $ = jQuery;
    var stencil = $('<div>' + html + '</div>');
    var replaceMathJax = function(){
        if ($(this).parents('.mjx-chtml,.MathJax_Display').length) return;

        var math = $(this).find('math');
        if (!math.length && $(this).data('mathml')){
            math = $($(this).data('mathml'));
        }
        if ($(this).next().length && $(this).next()[0].tagName.toLowerCase() == 'script' && $(this).next().attr('type').includes('math/asciimath')){
            var asciimathCode = $(this).next()[0].innerHTML.split('>').join('&gt;').split('<').join('&lt;');
            $(this).replaceWith( '`' + asciimathCode + '`' );
            return;
        }
        if ($(this).next().length && $(this).next()[0].tagName.toLowerCase() == 'script' && $(this).next().attr('type').includes('math/tex')){
            var latexCode = $(this).next()[0].innerHTML.split('>').join('&gt;').split('<').join('&lt;');
            $(this).replaceWith( '$$' + latexCode + '$$' );
            return;
        }
        if (math.length){
            var latex = math.find('annotation[encoding="LaTeX"]');
            if (latex.length){
                $(this).replaceWith( '$$' + $.trim(latex.html()) + '$$');
            }else{
                console.log('---------------mathKeep---------------');
                console.log($(this)[0].outerHTML);
                console.log('---------------mathKeep---------------');
                $(this).replaceWith( math[0].outerHTML );
            }
        }
    };


    if (stencil.find('.mjx-chtml,.MathJax_Display').length){
        stencil.find('.MathJax_Preview').remove();
        stencil.find('.mjx-chtml,.MathJax_Display').each(replaceMathJax);
        stencil.find('script').remove();
        html = stencil.html();
    }
    return html;
};

document.addEventListener('copy', function(e){
    var $ = jQuery;
    var getSelectionHtml = function() {
        var html = "";
        if (typeof window.getSelection != "undefined") {
            var sel = window.getSelection();
            if (sel.rangeCount) {
                var container = document.createElement("div");
                for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                    container.appendChild(sel.getRangeAt(i).cloneContents());
                }
                html = container.innerHTML;
            }
        } else if (typeof document.selection != "undefined") {
            if (document.selection.type == "Text") {
                html = document.selection.createRange().htmlText;
            }
        }
        return html;
    };
    var html = getSelectionHtml();
    try{
        var cuttedContent = $( '<span>' + html + '</span>' );
        var getNextScript = function(jEl){
            if (jEl.next().length && jEl.next()[0].tagName.toLowerCase() == 'script'){
                return jEl.next()[0].outerHTML;
            }
            return '';
        };

        cuttedContent.find('.mjx-chtml,.MathJax_Display').each(function(){
            if ($(this).parents('.mjx-chtml,.MathJax_Display').length) return;
            var mjWrapper =  $('#' + $(this).find('[id]:first').attr('id')).parents('.mjx-chtml,.MathJax_Display:last');
            if (mjWrapper.length){
                let replacing = mjWrapper[0].outerHTML + getNextScript(mjWrapper);
                $(this).replaceWith(replacing);
            }
        });
        if (cuttedContent.find('.mjx-chtml,.MathJax_Display').length){
            html = cuttedContent[0].outerHTML;
        }else{
            var firstIdented = $( '<span>' + html + '</span>' ).find('[id]:first');
            if (firstIdented.length){
                var mjWrapper =  $('#' + firstIdented.attr('id')).parents('.mjx-chtml,.MathJax_Display:last');
                if (mjWrapper.length){
                    html = mjWrapper[0].outerHTML + getNextScript(mjWrapper);
                }
            }
        }
    }catch(e){ throw e;}

    var htmlLatexed = MathJaxRevertRendering(html);
    if (html != htmlLatexed){
        e.clipboardData.setData('text/html', htmlLatexed);
        var removeHTML = true;
        e.clipboardData.setData('text/plain', htmlLatexed.split(/(<math)|(<\/math>)/).reduce(function(buffer, val){
            if (!val) return buffer;
            if (val == '<math' || val == '</math>'){
                removeHTML = !removeHTML;
                buffer += val;
            }else{
                buffer+=removeHTML ? $('<div>'+val+'</div>').text() : val;
            }
            return buffer;
        }, ''));
        e.preventDefault();
    }
});

/*Helper function for colored cells titlize*/
var olympicAddTitlesForTaskStatus = function(){
	jQuery('.hasno').attr('title', "Задача отсутствует у пользователя");
	jQuery('.notchecked').attr('title', "Без ответа");
	jQuery('.notchecked_answered').attr('title', "Не проверено");
	jQuery('.needchecking').attr('title', "Есть ответ, требуется проверка");
	jQuery('.autoanswer').attr('title', "Проверено автоматически");
    jQuery('.autoanswer_full').attr('title', "Проверено автоматически на полный балл");
    jQuery('.autoanswer_part').attr('title', "Проверено автоматически на неполный балл");
	jQuery('.haschecked').attr('title', "Проверено вручную");
	jQuery('.manualanswer').attr('title', "Ответ внесён проверяющим");
    jQuery('.no_full_decision').attr('title', "Ответ дан, но решение не заполнено");

	if (window.olympicAcademyId){
		jQuery('.olympic_appeal_check_notcomm').attr('title', "Есть комментарий, пока без ответа");
		jQuery('.olympic_appeal_check_commented').attr('title', "Есть комментарий, с ответом");
		jQuery('.olympic_appeal_check_commented_half').attr('title', 'Комментарии отвечены но не все');
	}else{
		jQuery('.olympic_appeal_check_notcomm').attr('title', "Апелляция - ответ ещё не дан");
		jQuery('.olympic_appeal_check_commented').attr('title', "Апелляция обработана");
		jQuery('.olympic_appeal_check_commented_half').attr('title', 'Апелляции обработаны но не все');
	}
    jQuery('.olympic_appeal_commented').attr('title', "Есть комментарии");
};

var cityFilterTranslate = function(callback, result){
    if (!result.response || !result.response.items.length || locale!='en'){
        return callback(result);
    }
    var data = {
        v: VK_API_VERSION,
        lang: locale,
        access_token: en4.core.vk_token,
        city_ids: result.response.items.map(function(value){ return value.id;}).join(',')
    };
    jQuery.ajax({
        url: "https://api.vk.com/method/database.getCitiesById",
        dataType: "jsonp",
        data: data,
        success: function (translatedRes) {
            var assoc = {};
            for(let i=0;i<translatedRes.response.length;i++){
                assoc[translatedRes.response[i].id] = translatedRes.response[i].title;
            }
            for (let i=0;i<result.response.items.length;i++)
            {
                if (assoc[result.response.items[i].id]){
                    result.response.items[i].title = assoc[result.response.items[i].id];
                }
            }
            callback(result);
        }
    });
};

var transliterate = function(str, keep_space) {
    var space = '-';
    var transl = {
        'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'e', 'ж': 'zh',
        'з': 'z', 'и': 'i', 'й': 'j', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n',
        'о': 'o', 'п': 'p', 'р': 'r','с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h',
        'ц': 'c', 'ч': 'ch', 'ш': 'sh', 'щ': 'sh','ъ': '~', 'ы': 'y', 'ь': '~', 'э': 'e', 'ю': 'yu', 'я': 'ya'
    };
    var link = '';
    for (var i = 0; i < str.length; i++) {
        if(/[а-яё]/i.test(str.charAt(i))) {
            var sym = transl[str.charAt(i).toLocaleLowerCase()];
            link += str.charAt(i) == str.charAt(i).toLocaleLowerCase() ? sym :(sym.charAt(0).toLocaleUpperCase() + sym.slice(1));
        } else if (/[a-z_\-0-9]/.test(str.charAt(i)) || keep_space) {
            link += str.charAt(i);
        } else if (/\s/.test(str.charAt(i))) {
            link += space;
        }
    }
    return(link.replace(/~/g,'').replace(/(-)?$/,''));
};

window.showMessagesPopup = function(messagesForPopup, modal){
    if (!messagesForPopup || !messagesForPopup.length || Smoothbox.instance) return;
    let html = '<div class="popup_messages">';
    let ids = [];
    for(i =0; i< messagesForPopup.length; i++){
        let message = messagesForPopup[i];
        ids.push(message.message_id);
        html += '<div class="popup_message"><div>';
        html += message.body;
        html += '</div><div>';
        html += '<span class="sender">'+message.user +'</span>';
        html += '<span class="time">'+message.date +'</span>';
        html += '<audio class="popup_message_audio" src="/application/modules/Messages/externals/chat/ding.mp3"></audio>';
        html += '</div></div>';
    }
    html += '<div style="text-align: center"><button onclick="document.cookie = \'popupMessagesViewed='+ids.join(',')+';path=/\';Smoothbox.close();">OK</button></div>';
    html += '</div>';
    Smoothbox.open(html, modal ? {noOverlayClose: 1} : {});
    Smoothbox.instance.doAutoResize();
    setTimeout(function(){
        Smoothbox.instance.doAutoResize();
        jQuery('#TB_ajaxContent .popup_message_audio')[0].play();
    }, 400);

};

jQuery(function($){en4.core.runonce.add(function () {
   if (window.messagesForPopup && window.messagesForPopup.length && !$('#global_content_simple').length /*not popup now*/){
       window.showMessagesPopup(window.messagesForPopup);
   }
})});

jQuery(document).on('after-message-watch', function(e, data){
	if (data.messages.length){
		window.showMessagesPopup(data.messages, true);
	}
});


window.animationEvent = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';
window.popupBluringClasses = '#global_wrapper, #global_header, #global_footer, #global_header_container, #left_menu';
//Auto-expanding scripting
en4.core.pageBeginHash = window.location.hash;
en4.core.tsStart = (new Date).valueOf();
jQuery(function($){
    $('[data-role="expand-content"]').each(function(){
        let expandSource = $(this);
        let expandIn = $('#' + $(this).attr('data-expand-target'));
        let html = $(this).html();
        let hash = $(this).attr('data-hash');
        let link = $(this).parents('a:first');
        if (!link.length){
            link = $(this).prevAll('a:first');
        }
        link.click(function(){
            if (expandSource.attr('data-expand-extra')){
                if (expandIn.is(':visible')){
                    expandIn.hide();
                }
                eval('expandIn = ' + expandSource.attr('data-expand-extra'));
            }else{
                if (!expandIn.is(':visible')){
                    expandIn.parent().show();
                    expandIn.html(html).css('opacity', '1').slideDown();
                    if (typeof en4.onExpandSection == 'function'){
                        en4.onExpandSection(expandIn);
                    }
                }else{
                    expandIn.animate({opacity: 0}, 400);
                    setTimeout(function () {
                        expandIn.parent().show();
                        expandIn.html(html).animate({opacity: 1}, 600);
                        if (typeof en4.onExpandSection == 'function'){
                            en4.onExpandSection(expandIn);
                        }
                    }, 500);
                }
            }

            let sectionParent = link.parents('.profile_content_tab');
            if (sectionParent.length) sectionParent.addClass('has-expanded');

            window.scrollTo({
                top: expandIn.offset().top - 120,
                behavior: 'smooth',
            });
            if (hash){
                window.history.replaceState(null,null, window.location.pathname + '#' + hash);
            }
        });
        if (hash && en4.core.pageBeginHash == "#" + hash){
            setTimeout(function(){
                link.trigger('click');
            }, 300);
        }
    });
});

jQuery(function($){
    //add id-cookie for AD
    let setCookie = function(name,value,days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days*24*60*60*1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + (value || "")  + expires + "; path=/";
    };
    if (en4.user.viewer.id){
        setCookie('user_id', en4.user.viewer.id, 30);
    }
});

/*Helper function for popup open(execute callback) after other popup will close */
window.popupWaiting = function(callback, appendNewpopupToExternalEl = null){
    let $ = jQuery;
    if ($('#TB_window').length){
        setTimeout(() => window.popupWaiting(callback), 300);
    }else{
        console.log($('#TB_window').length);
        callback();
        //fixing for proctoring
        if (!appendNewpopupToExternalEl) appendNewpopupToExternalEl = $('[data-role="video_record_tip"]');
        if (appendNewpopupToExternalEl.length) {
            if ($('#TB_iframeContent').length) {
                $('#TB_iframeContent')[0].onload = function () {
                    $('[data-role="video_record_tip"]').html(
                        $('#TB_iframeContent')[0].contentDocument.querySelectorAll('body')[0].innerText
                    );
                };
            } else if ($('#TB_ajaxContent').length) {
                appendNewpopupToExternalEl.html( $('#TB_ajaxContent').text() );
            }
        }
    }
};

jQuery(function($){
    $('body').off('click.copy_tg_key').on('click.copy_tg_key', '[data-tg-token]',function(e){
        let token = $(this).attr("data-tg-token");
        let span = $(this).parent().children('span');
        if (!span.length) span = $('<span class="copied"></span>').appendTo( $(this).parent() );
        navigator.clipboard.writeText(token).then(function() {
            span.css('color', 'darkgreen').html('<BR>Ключ скопирован, теперь вы можете вставить ключ по запросу Telegram-бота');
            if (Smoothbox.instance) Smoothbox.instance.doAutoResize();
        }, function(err) {
            span.css('color', 'darkred').html('<BR>Ошибка при копировании в буффер обмена, попробуйте скопировать вручную: выделив мышкой');
            if (Smoothbox.instance) Smoothbox.instance.doAutoResize();
        });
    });
});

window.revertSubmitBlocking = function(form){
    setTimeout(() => {
        form.removeAttr('data-submitted');
        if (form.attr('data-original-submit-text'))
            jQuery('button[name="submit"],button[id="submit"]', form).text(form.attr('data-original-submit-text'));
    }, 200);
};